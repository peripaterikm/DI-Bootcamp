URL: https://github.com/peripaterikm/DI-Bootcamp/blob/main/Week7/Day4/ExerciseXP/W7D4_exercises.py
suggestions for improvement:
- In Exercise 2, handle potential errors like the file not being found or the sheet not existing. Add error handling using try-except blocks.
- In Exercise 3,  the code overwrites existing data.  It's better to append to a new sheet or clearly state it overwrites the original.  Consider adding a message to notify the user of the overwrite.
- In Exercise 4, the code saves the chart as a separate image file (.png) instead of embedding it in the Excel file.  Openpyxl allows for chart embedding, improving the report's integration.
- Use more descriptive variable names (e.g., instead of `df`, use `sales_data`).
- Add comments explaining complex logic or non-obvious steps in each exercise.
Brief justification:
- correctness: The code addresses all four exercises. Exercise 1 creates a simple Excel calculator with formulas, directly matching the requirements. Exercise 2 correctly iterates through the plant list, identifying and printing plants out of stock. Exercise 3 successfully filters data and writes it to an Excel file, fulfilling the given task. Exercise 4 performs the data manipulation and visualization correctly, creating the sales report. The only minor deviation is the lack of chart embedding in the final Excel file in Exercise 4, and some absent error handling. This justifies the 90% score.
- readability: The code is mostly readable, but improvements like more descriptive variable names and more extensive commenting would increase readability.  The structure is generally clear, but it could be enhanced by separating functions for better organization.
- performance: The code's performance is efficient for the tasks.  The looping in Exercise 2 could be optimized slightly, but the overall runtime is acceptable.  The pandas operations in Exercises 3 and 4 are generally efficient. No major performance bottlenecks are present.
- security: The code doesn't have any obvious security vulnerabilities. It only reads and writes local Excel files, it does not interact with any external resources. No user input is processed, so there are no injection vulnerabilities.

